[[development-basepath]]
=== basePath 注意事项

所有从 Kibana UI 到服务端的通信，都要遵守 `server.basePath` 。 下面是一些基于上下文处理该问题的建议：
[float]
==== `<img>` 和 `<a>` 元素

如你所愿，可以不写基本路径而直接写上 `src` 或者 `href` urls，然后用 `kbn-src` 或 `kbn-href` 替换 `src` 或 `href`。

["source","shell"]
-----------
<img kbn-src="plugins/kibana/images/logo.png">
-----------

[float]
==== 获取一个静态的 asset url

用 webpack 导入 asset 到 build 中。这会给你一个 JavaScript 的URL，并给webpack一个机会去执行优化和 cache-busting 。

["source","shell"]
-----------
// in plugin/public/main.js
import uiChrome from 'ui/chrome';
import logoUrl from 'plugins/facechimp/assets/banner.png';

uiChrome.setBrand({
  logo: `url(${logoUrl}) center no-repeat`
});
-----------

[float]
==== 前端 API 请求

使用 `chrome.addBasePath()` 将 basePath 添加到 url 的前面。

["source","shell"]
-----------
import chrome from 'ui/chrome';
$http.get(chrome.addBasePath('/api/plugin/things'));
-----------

[float]
==== 服务器端

在每个绝对 URL 路径上添加 `config.get('server.basePath')`

["source","shell"]
-----------
const basePath = server.config().get('server.basePath');
server.route({
  path: '/redirect',
  handler(req, reply) {
    reply.redirect(`${basePath}/otherLocation`);
  }
});
-----------

[float]
==== 开发模式中的 BasePathProxy

Kibana 开发服务器自动运行在一个有随机 `server.basePath` 的代理之后。这样，当开发者编写代码时，他们会不断地确认他们的代码是否与 basePath 一起工作。

为了达到这个效果，`serve` 任务做了如下一些事情：

1. 根据 `dev.basePathProxyTarget` 配置服务器的端口（默认 `5603`）
2. 在 `server.port` 启动一个 `BasePathProxy`

  - 为 `randomBasePath` 挑选一个三位数的值

  - 从 `/{any}/app/{appName}` 重定向到 `/{randomBasePath}/app/{appName}` ，所以刷新会起作用
  - 代理所有到 Kibana 服务器并以 `/{randomBasePath}/` 开头的请求

有时候，在开发环境中代理会产生意想不到的副作用，所以，当需要的时候，你可以通过传递 `--no-base-path` 标志到 `serve` 任务或者 `npm start`   以退出代理。

["source","shell"]
-----------
npm start -- --no-base-path
-----------
