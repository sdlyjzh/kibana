[[development-dependencies]]
=== 管理依赖

在开发 Kibana 前端环境中使用的插件时，您可能想要包含一个或两个库(至少)。虽然这在90%的情况下都是很简单的，但总会有一些异常值，而其中一些异常值还是在非常受欢迎的项目中。

在 Kibana 中使用外部库之前，您要先安装它。您可以通过如下方式安装...

[float]
==== npm （首选方法）

一旦您 http://npmsearch.com[发现] 想要添加的依赖，您可以像这样安装它：

["source","shell"]
-----------
npm install --save some-neat-library
-----------

在 javascript 文件的顶部，只需要使用它的名称来导入库:

["source","shell"]
-----------
import someNeatLibrary from 'some-neat-library';
-----------

就像在 node.js 中一样，前端代码可以在不需要任何附件配置的情况下，使用 npm 安装节点模块。
[float]
==== webpackShims

当您想要用的库使用 es6 或 common.js 模块，但在 npm 上不可用时，你可以复制库的源文件到 webpackShim。

["source","shell"]
-----------
# 为新的库创建一个目录
mkdir -p webpackShims/some-neat-library
# 下载您想用的库导该目录
curl https://cdnjs.com/some-neat-library/library.js > webpackShims/some-neat-library/index.js
-----------

然后，像往常一样在您的 JavaScript 代码中包含包含该库：
["source","shell"]
-----------
import someNeatLibrary from 'some-neat-library';
-----------

[float]
==== Shimming 第三方代码

一些 JavaScript 库声明它们依赖的方式，其他工具例如 webpack 并不理解。通常情况下，库不会到处它们提供的值，而只是将它们写入的全局变量里（或者某种意义上的变量）。

当将这样的代码拉入到 Kibana 中时，我们要编写 “shims” 来适应第三方代码，以便与我们的应用、其他库，和模块系统一起工作。我们可以使用 `webpackShims` 目录来做到这一点。

通过例子，是解释如何编写 shim 的最简单方式。下面是我们用于 jQuery 的 webpack shim。

["source","shell"]
-----------
// webpackShims/jquery.js

module.exports = window.jQuery = window.$ = require('node_modules/jquery/dist/jquery');
require('ui/jquery/findTestSubject')(window.$);
-----------

由于 `webpackShims` 的行为类似 `node_modules`， 因此一旦 webpack 发现 `import 'jquery';` 语句，shim 会被加载。当它发生时，shim 会做两件事：

. 将实际 jQuery 模块的导出值分配给 `$` 和 `jQuery`，允许像 angular 这样的库检测 jQuery 是否可用，并将其作为模块的导出变量使用。
. 最终，我们编写的 jQuery 插件被包含，因此每次在 jQuery 中导入文件，它会得到 jQuery 和 `$.findTestSubject` 帮助模块。

下面是我们用于 angular 的webpack shim：

["source","shell"]
-----------
// webpackShims/angular.js

require('jquery');
require('node_modules/angular/angular');
require('node_modules/angular-elastic/elastic');
require('ui/modules').get('kibana', ['monospaced.elastic']);
module.exports = window.angular;
-----------

如果你一行一行的看，会发现 shim 做的很简单：

. 确保 jQuery 在 angular（实际运行在 shim 之上） 之前加载
. 从 npm 安装中加载 angular.js
. 加载 angular-elastic 插件，每当我们导入 angular 时，都会要包含它
. use the `ui/modules` module to add the module exported by angular-elastic as a dependency to the `kibana` angular module
. 最后，导出 window.angular 变量。这意味着当写下 `import angular from 'angular';` 时会恰当地设置 angular 库中的angular 变量， 而不是未定义的默认配置。
